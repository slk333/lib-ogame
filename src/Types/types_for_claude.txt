// Constant Arrays
export const defenseNames = [
    "rocketLauncher",
    "lightLaser",
    "heavyLaser",
    "gaussCannon",
    "ionCannon",
    "plasmaTurret",
] as const

export const shipNames = [
    "lightFighter",
    "heavyFighter",
    "cruiser",
    "battleship",
    "battlecruiser",
    "bomber",
    "destroyer",
    "deathstar",
    "reaper",
    "pathfinder",
    "smallCargo",
    "largeCargo",
    "colonyShip",
    "recycler",
    "espionageProbe",
    "solarSatellite",
    "crawler",
] as const

export const structureNames = [
    "metalMine",
    "crystalMine",
    "deuteriumSynthesizer",
    "roboticsFactory",
    "shipyard",
    "researchLab",
    "naniteFactory",
] as const

// Base Types
export type ResourcesRecord = {
    metalAmount: number
    crystalAmount: number
    deuteriumAmount: number
}

export type ResourceCost = ResourcesRecord

export interface Coordinates {
    galaxy: number
    solarSystem: number
    planetPosition: number
}

// Structure Types
export type StructureName = (typeof structureNames)[number]

export interface PlanetStructure {
    level: number
    name: StructureName
}

// Shipyard Types
export type ShipName = (typeof shipNames)[number]
export type DefenseName = (typeof defenseNames)[number]

export interface ShipyardUnit {
    type: "ship" | "defense"
    name: ShipName | DefenseName
}

export interface ShipyardOrder {
    unit: ShipyardUnit
    quantity: number
}

export interface ScheduledShipyardOrder {
    order: ShipyardOrder
    startDate: string
    completionDate: string
    unitBuildTime: number // seconds
    unitsCompleted: number
}

// Fleet Mission Types
export type FleetMissionType = "Expedition" | "Spy"
export type FleetMissionStatus = "pendingArrival" | "returning" | "returned"

export interface FleetMission {
    id: string
    type: FleetMissionType
    status: FleetMissionStatus

    ships: {
        [shipName in ShipName]?: {
            name: ShipName
            count: number
        }
    }

    cargoHold: ResourcesRecord

    origin: {
        id: string
        name: string
        coordinates: Coordinates
        type: string
    }

    destination: {
        id: string
        name?: string
        coordinates: Coordinates
        type: string
    }

    sender: {
        id: string
        name: string
    }

    receiver: {
        id: string
        name: string
    }

    departureDate: string
    arrivalDate: string
    returnDate: string

    expireAt?: Date
}

export interface TentativeFleetMission {
    type: FleetMissionType
    ships: {
        [shipName in ShipName]?: {
            name: ShipName
            count: number
        }
    }
    origin: {
        id: string
    }
    destination: {
        id: string
    }
}

// Player Types
export interface PublicPlayer {
    id: string
    name: string
}

export interface FirestorePlayer {
    id: string
    createdAt: string
    email: string
    name: string
    nameLowercase: string
    planets: string[]
}

// Planet Types
export interface PublicPlanet {
    id: string
    name: string
    owner: {
        id: string
        name: string
    }
    coordinates: Coordinates
}

export interface FirestorePlanet {
    id: string
    name: string

    owner: {
        id: string
        name: string
    }

    coordinates: Coordinates

    structures: Record<StructureName, PlanetStructure>

    ships: Record<ShipName, { name: ShipName; count: number }>

    resources: ResourcesRecord

    snapshotDate: string

    pendingStructure: {
        name: StructureName
        completionDate: string
    } | null

    pendingShipyardUnit: {
        shipyardUnit: ShipyardUnit
        completionDate: string
    } | null

    structureQueue: StructureName[]
    shipyardQueue: ScheduledShipyardOrder[]
}

// Message Types
export interface Message {
    readonly id: string
    readonly emittedAt: string
    readonly sender: PublicPlayer
    readonly recipient: PublicPlayer
    readonly status: "unread" | "read"
    readonly content: string
    readonly expireAt: Date
}

// Ranking Types
export interface PlayerScore {
    playerID: string
    playerName: string
    points: number
    ranking: number
}

export interface PlanetScore {
    playerID: string
    playerName: string
    points: number
}

export type RankingDictionary = Record<PlayerScore["playerID"], PlayerScore>
